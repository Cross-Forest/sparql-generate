BASE <http://crossforest.eu/ifn/data/>
PREFIX ifn: <http://crossforest.eu/ifn/ontology/>
PREFIX spo: <http://crossforest.eu/position/ontology/>
PREFIX smo: <http://crossforest.eu/measures/ontology/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> 

PREFIX plot: <http://crossforest.eu/ifn/data/plot/>
PREFIX province:   <http://crossforest.eu/ifn/data/province/>
PREFIX basalArea: <http://crossforest.eu/ifn/data/basalArea/>
PREFIX volumeWithBark: <http://crossforest.eu/ifn/data/volumeWithBark/>
PREFIX volumeWithoutBark: <http://crossforest.eu/ifn/data/volumeWithoutBark/>
PREFIX infoSpecies: <http://crossforest.eu/ifn/data/infoSpecies/>
PREFIX numberOfTrees: <http://crossforest.eu/ifn/data/numberOfTrees/>
PREFIX unit: <http://crossforest.eu/measures/data/unit/>
PREFIX dc: <http://crossforest.eu/ifn/data/diametricClass/>
PREFIX stratum: <http://crossforest.eu/ifn/data/stratum/>

GENERATE {

	<stratum/{?idProvinciaEstrato}> a ifn:Stratum ;
		ifn:containsSpecies <infoSpecies/{?idStratumSpecies}> ;
	.

		<infoSpecies/{?idStratumSpecies}>
			ifn:hasSpecies <http://crossforest.eu/ifn/ontology/Species{?species}> ;
			ifn:hasDiametricClass <diametricClass/{?CD}> ;
			ifn:hasBasalAreaInM2 ?basalArea ;
			ifn:hasVolumeWithoutBarkInM3 ?volumeWithoutBark ;
			ifn:hasVolumeWithBarkInM3 ?volumeWithBark ;
			ifn:hasNumberOfTreesInUnits ?numerOfTrees ;
			ifn:hasBasalArea <basalArea/{?BASAL_AREA}> ;
			ifn:hasVolumeWithBark <volumeWithBark/{?VOLUME_WITH_BARK}> ;
			ifn:hasVolumeWithoutBark <volumeWithoutBark/{?VOLUME_WITHOUT_BARK}> ;
			ifn:hasNumberOfTrees <numberOfTrees/{?NUMBER_OF_TREES}> ;
		.

		<basalArea/{?BASAL_AREA}> a ifn:BasalArea ;
			smo:hasValue ?basalArea ;
			smo:hasUnit unit:M2 ;
		.

		<volumeWithoutBark/{?idProvinceSpecies}> a ifn:VolumeWithoutBark ;
			smo:hasValue ?volumeWithoutBark ;
			smo:hasUnit unit:M3 ;
		.

		<volumeWithBark/{?VOLUME_WITH_BARK}> a ifn:VolumeWithBark ;
			smo:hasValue ?volumeWithBark ;
			smo:hasUnit unit:M3 ;
		.

		<numberOfTrees/{?NUMBER_OF_TREES}> a ifn:NumberOfTrees ;
			smo:hasValue ?numerOfTrees ;
			smo:hasUnit unit:Units ;
		.
	
}
SOURCE <urn:source> AS ?source
ITERATOR <http://w3id.org/sparql-generate/iter/CSV>(?source, true, "\"", ",", "\n",
	"Origen","Estrato","Especie","CD","NPies","ABas","VCC","VSC","IAVC","VLE"
	)
	AS ?Origen ?Estrato ?Especie ?CD ?NPies ?ABas ?VCC ?VSC ?IAVC ?VLE

WHERE {
	BIND("{?Origen}-{?Estrato}" AS ?idProvinciaEstrato)
	BIND(replace(?Especie, "0*([1-9][0-9]*)", "$1") AS ?species)
	BIND("{?Origen}-{?Estrato}-{?species}-{?CD}" AS ?idStratumSpecies)
	BIND(IF("{?NPies}"!="" && "{?NPies}"!="0", xsd:decimal(?NPies), ?unbound) AS ?numerOfTrees)
	BIND("{?numerOfTrees}" AS ?NUMBER_OF_TREES)
	BIND(IF("{?ABas}"!="" && "{?ABas}"!="0", xsd:decimal(?ABas), ?unbound) AS ?basalArea)
	BIND("{?basalArea}" AS ?BASAL_AREA)
	BIND(IF("{?VSC}"!="" && "{?VSC}"!="0", xsd:decimal(?VSC), ?unbound) AS ?volumeWithoutBark)
	BIND("{?volumeWithoutBark}" AS ?VOLUME_WITHOUT_BARK)
	BIND(IF("{?VCC}"!="" && "{?VCC}"!="0", xsd:decimal(?VCC), ?unbound) AS ?volumeWithBark)
	BIND("{?volumeWithBark}" AS ?VOLUME_WITH_BARK)
}