BASE <http://crossforest.eu/mfe/>
PREFIX iter: <http://w3id.org/sparql-generate/iter/>
PREFIX fun: <http://w3id.org/sparql-generate/fn/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> 
PREFIX ifn: <http://crossforest.eu/ifn/ontology/>
PREFIX mfe: <http://crossforest.eu/mfe/ontology/>
PREFIX smo: <http://crossforest.eu/measures/ontology/>
PREFIX spo: <http://crossforest.eu/position/ontology/>
PREFIX epsg: <http://epsg.w3id.org/ontology/>
PREFIX esadm: <http://vocab.linkeddata.es/datosabiertos/def/sector-publico/territorio#>

PREFIX patch: <http://crossforest.eu/mfe/data/patch/>
PREFIX polygon: <http://crossforest.eu/mfe/data/polygon/>
PREFIX infoSpecies: <http://crossforest.eu/mfe/data/infoSpecies/>
PREFIX occupationOfSpecies: <http://crossforest.eu/mfe/data/occupationOfSpecies/>
PREFIX canopyCover: <http://crossforest.eu/mfe/data/canopyCover/>
PREFIX unit: <http://crossforest.eu/measures/data/unit/>
PREFIX crs: <http://crossforest.eu/epsg/data/crs/>
PREFIX wkt: <http://www.opengis.net/ont/geosparql#>
PREFIX layer: <http://crossforest.eu/mfe/data/layer/>
PREFIX province: <http://crossforest.eu/ifn/data/province/>
PREFIX bound: <http://crossforest.eu/mfe/data/bound/>
PREFIX area: <http://crossforest.eu/mfe/data/area/>
PREFIX axis: <http://epsg.w3id.org/data/axis/>
PREFIX bound: <http://crossforest.eu/mfe/data/bound/>


GENERATE {

	<data/patch/{?idPatch}> a mfe:Patch , <ontology/Class{?CLASMFE_IF}> , <ontology/TypeOfForest{?TIPO_BOSQU}> , <ontology/Realm{?REGBIO}> , <ontology/StructuralType{?TIPESTR}> , <ontology/FormaDeMasa{?FOR_MAN}> , <http://crossforest.eu/ifn/ontology/Use{?CLAS_IFN}> ;
		spo:hasPolygon <data/polygon/{?idPatch}-4326> ;
		mfe:hasCanopyCoverTotal <data/canopyCover/total{?TFCCTOT}> ;
		mfe:hasCanopyCoverTotalPercent ?tfcctot ;
		mfe:hasCanopyCoverTrees <data/canopyCover/trees{?TFCCARB}> ;
		mfe:hasCanopyCoverTreesPercent ?tfccarb ;
		esadm:provincia <http://crossforest.eu/ifn/data/province/{?province}> ;
		mfe:containsSpecies <data/infoSpecies/{?SP1}-{?E1}-{?O1}> ;
		mfe:containsSpecies <data/infoSpecies/{?SP2}-{?E2}-{?O2}> ;
		mfe:containsSpecies <data/infoSpecies/{?SP3}-{?E3}-{?O3}> ;
	.

	<data/infoSpecies/{?SP1}-{?E1}-{?O1}> a mfe:SpeciesInPatch ;
		mfe:hasSpecies <http://crossforest.eu/ifn/ontology/Species{?SP1}> ;
		mfe:hasStandDevelopment <data/standDevelopment/{?E1}> ;
		mfe:hasOccupationOfSpecies <data/occupationOfSpecies/{?O1}> ;
		mfe:hasPercentageOfSpecies ?o1 ;
	.

	<data/occupationOfSpecies/{?O1}> a mfe:OccupationOfSpecies ;
		smo:hasValue ?o1 ;
		smo:hasUnit unit:Percentage ;
	.

	<data/infoSpecies/{?SP2}-{?E2}-{?O2}> a mfe:SpeciesInPatch ;
		mfe:hasSpecies <http://crossforest.eu/ifn/ontology/Species{?SP2}> ;
		mfe:hasStandDevelopment <data/standDevelopment/{?E2}> ;
		mfe:hasOccupationOfSpecies <data/occupationOfSpecies/{?O2}> ;
		mfe:hasPercentageOfSpecies ?o2 ;
	.

	<data/occupationOfSpecies/{?O2}> a mfe:OccupationOfSpecies ;
		smo:hasValue ?o2 ;
		smo:hasUnit unit:Percentage ;
	.

	<data/infoSpecies/{?SP3}-{?E3}-{?O3}> a mfe:SpeciesInPatch ;
		mfe:hasSpecies <http://crossforest.eu/ifn/ontology/Species{?SP3}> ;
		mfe:hasStandDevelopment <data/standDevelopment/{?E3}> ;
		mfe:hasOccupationOfSpecies <data/occupationOfSpecies/{?O3}> ;
		mfe:hasPercentageOfSpecies ?o3 ;
	.

	<data/occupationOfSpecies/{?O3}> a mfe:OccupationOfSpecies ;
		smo:hasValue ?o3 ;
		smo:hasUnit unit:Percentage ;
	.

	<data/canopyCover/total{?TFCCTOT}> a mfe:CanopyCoverTotal ;
		smo:hasUnit unit:Percentage ;
		smo:hasValue "{?TFCCTOT}"^^xsd:decimal ;
	.

	<data/canopyCover/trees{?TFCCARB}> a mfe:CanopyCoverTrees ;
		smo:hasUnit unit:Percentage ;
		smo:hasValue "{?TFCCARB}"^^xsd:decimal ;
	.

	<data/polygon/{?idPatch}-4326> a spo:Polygon ;
		spo:isInLayer <data/layer/c_s5> ;
		epsg:hasCoordinateReferenceSystem crs:4326 ;
		wkt:asWKT ?geometricCoordinates ;
		spo:hasLeftBound <data/bound/107-{?WEST_BOUND}> ;
		epsg:hasLeftBound107 ?west ;
		spo:hasLowerBound <data/bound/106-{?SOUTH_BOUND}> ;
		epsg:hasLowerBound106 ?south ;
		spo:hasRightBound <data/bound/107-{?EAST_BOUND}> ;
		epsg:hasRightBound107 ?east ;
		spo:hasUpperBound <data/bound/106-{?NORTH_BOUND}> ;
		epsg:hasUpperBound106 ?north ;
		spo:hasArea <data/area/{?SHAPE_AREA}-M2> ;
		spo:hasAreaInSquareMeters ?ShapeArea ;
	.

	<data/bound/107-{?WEST_BOUND}> a epsg:LeftBound ;
		epsg:hasAxis axis:107 ;
		smo:hasValue ?west ;
		smo:hasUnit unit:Degrees ;
	.

	<data/bound/106-{?SOUTH_BOUND}> a epsg:LowerBound ;
		epsg:hasAxis axis:106 ;
		smo:hasValue ?south ;
		smo:hasUnit unit:Degrees ;
	.

	<data/bound/107-{?EAST_BOUND}> a epsg:RightBound ;
		epsg:hasAxis axis:107 ;
		smo:hasValue ?east ;
		smo:hasUnit unit:Degrees ;
	.

	<data/bound/106-{?NORTH_BOUND}> a epsg:UpperBound ;
		epsg:hasAxis axis:106 ;
		smo:hasValue ?north ;
		smo:hasUnit unit:Degrees ;
	.

	<data/area/{?SHAPE_AREA}-M2> a smo:Area ;
		smo:hasUnit unit:SquareMeters ;
		smo:hasValue ?ShapeArea ;
	.

}
SOURCE <urn:source> AS ?source
ITERATOR iter:GeoJSON(?source) AS ?geometricCoordinates ?properties
WHERE {
	BIND(fun:JSONPath(?properties, "$.POLIGON") AS ?poligon)
	BIND("{?poligon}" AS ?POLIGON)
	BIND(fun:JSONPath(?properties, "$.PROV_MFE50") AS ?prov_mfe50)
	BIND("{?prov_mfe50}" AS ?PROV_MFE50)
	BIND(IF(STRLEN(?PROV_MFE50)=1,CONCAT("0",?PROV_MFE50),?PROV_MFE50) AS ?province)
	BIND(xsd:decimal(fun:JSONPath(?properties, "$.Shape_Area")) AS ?ShapeArea)
	BIND("{?Shape_Area}" AS ?SHAPE_AREA)
	BIND(xsd:decimal(fun:JSONPath(?properties, "$.west")) AS ?west)
	BIND("{?west}" AS ?WEST_BOUND)
	BIND(xsd:decimal(fun:JSONPath(?properties, "$.south")) AS ?south)
	BIND("{?south}" AS ?SOUTH_BOUND)
	BIND(xsd:decimal(fun:JSONPath(?properties, "$.east")) AS ?east)
	BIND("{?east}" AS ?EAST_BOUND)
	BIND(xsd:decimal(fun:JSONPath(?properties, "$.north")) AS ?north)
	BIND("{?north}" AS ?NORTH_BOUND)
	BIND(fun:JSONPath(?properties, "$.TFCCTOT") AS ?tfcctot)
	BIND("{?tfcctot}" AS ?TFCCTOT)
	BIND(fun:JSONPath(?properties, "$.TFCCARB") AS ?tfccarb)
	BIND("{?tfccarb}" AS ?TFCCARB)
	BIND(fun:JSONPath(?properties, "$.TIPESTR") AS ?tipestr)
	BIND("{?tipestr}" AS ?TIPESTR)
	BIND(fun:JSONPath(?properties, "$.DISTRIB") AS ?distrib)
	BIND("{?distrib}" AS ?DISTRIB)
	BIND(fun:JSONPath(?properties, "$.FOR_MAN") AS ?for_man)
	BIND("{?for_man}" AS ?FOR_MAN)
	BIND(fun:JSONPath(?properties, "$.SP1") AS ?sp1)
	BIND( IF(?sp1!=0, "{?sp1}", ?unbound) AS ?SP1)
	BIND(fun:JSONPath(?properties, "$.E1") AS ?e1)
	BIND("{?e1}" AS ?E1)
	BIND(fun:JSONPath(?properties, "$.O1")*10 AS ?o1)
	BIND("{?o1}" AS ?O1)
	BIND(fun:JSONPath(?properties, "$.SP2") AS ?sp2)
	BIND( IF(?sp2!=0, "{?sp2}", ?unbound) AS ?SP2)
	BIND(fun:JSONPath(?properties, "$.E2") AS ?e2)
	BIND("{?e2}" AS ?E2)
	BIND(fun:JSONPath(?properties, "$.O2")*10 AS ?o2)
	BIND("{?o2}" AS ?O2)
	BIND(fun:JSONPath(?properties, "$.SP3") AS ?sp3)
	BIND( IF(?sp3!=0, "{?sp3}", ?unbound) AS ?SP3)
	BIND(fun:JSONPath(?properties, "$.E3") AS ?e3)
	BIND("{?e3}" AS ?E3)
	BIND(fun:JSONPath(?properties, "$.O3")*10 AS ?o3)
	BIND("{?o3}" AS ?O3)
	BIND(fun:JSONPath(?properties, "$.CLASMFE_IF") AS ?clasme_if)
	BIND("{?clasme_if}" AS ?CLASMFE_IF)
	BIND(fun:JSONPath(?properties, "$.TIPO_BOSQU") AS ?tipo_bosqu)
	BIND( IF("{?tipo_bosqu}"!="", "{?tipo_bosqu}", ?unbound) AS ?TIPO_BOSQU)
	# BIND(fun:JSONPath(?properties, "$.") AS ?)
	# BIND(fun:JSONPath(?properties, "$.") AS ?)
	# BIND(fun:JSONPath(?properties, "$.") AS ?)
	BIND(fun:JSONPath(?properties, "$.REGBIO") AS ?regbio)
	BIND("{?regbio}" AS ?REGBIO)
	BIND(fun:JSONPath(?properties, "$.CLAS_IFN") AS ?clas_ifn)
	BIND( IF(?clas_ifn!=0, "{?clas_ifn}", ?unbound) AS ?CLAS_IFN)
	BIND("{?province}-{?POLIGON}" AS ?idPatch)
}

